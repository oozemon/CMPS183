(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> str() takes at most 1 argument (2 given)"
p3
sS'layer'
p4
S'/home/cmps-107/lib/web2py/applications/TRVLR/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n### required - do no delete\ndef user():\n    return dict(form=auth())\ndef download(): return response.download(request,db)\ndef call(): return service()\nimport datetime\nimport time\n### end requires\n\ndef index():\n    uid     = request.args(0)\n    user2   = db.auth_user[request.args(0)]\n    its2    = db().select(db.all_itinerary.ALL, orderby=db.all_itinerary.date_created)\n    listOfAllUsers = db().select(db.auth_user.ALL, orderby=db.auth_user.first_name)\n    #funcForBar()\n    return dict(message="Mapping the world, for travelers", its2=its2, user2=user2, listOfAllUsers=listOfAllUsers,\n        searching=funcForBar())\n\ndef funcForBar():\n    partialstr = request.vars.partialstr if request.vars else None\n    query      = db.auth_user.first_name\n    auth_user   = db(query).select(db.auth_user.first_name)\n    items = []\n\n    for (i,auth_user) in enumerate(auth_user):\n        items.append(DIV(A(auth_user.first_name, _id="res%s"%i, _href="#", _onclick="copyToBox($(\'#res%s\').html())"%i), _id="resultLiveSearch"))\n\n    return TAG[\'\'](*items)\n\ndef error():\n    return dict()\n\n#@auth.requires_login()\ndef destinations_manage():\n    form = SQLFORM.smartgrid(db.t_destinations,onupdate=auth.archive)\n    return locals()\n\n\n@auth.requires_login()\ndef profile_manage():\n    return dict(bla="testing")  \n\n@auth.requires_login()\ndef profile():\n    return redirect(URL(\'default\',\'users/\'+str(auth.user.id)))\n\ndef doStuff():\n    current = datetime.datetime.today()\n    index = db.all_itinerary.insert(it_name=request.vars.d_name, des_location=request.vars.d_location,\n     days_staying_start=request.vars.d_start_date,days_staying_end=request.vars.d_end_date,\n     description_of_stays=request.vars.d_description,ownerA=auth.user, date_created=current)\n    return "jQuery(\'#target\').append(\'<li><a href=\\"showIts?arg1=%s&arg2=%s&arg3=%s&arg4=%s&arg5=%s\\">%s</a></li>\');" % (request.vars.d_name,request.vars.d_location,str(request.vars.d_start_date),str(request.vars.d_end_date),str(request.vars.d_description,request.vars.d_name)\n)    \ndef updateItOnView():\n    its = db().select(db.all_itinerary.ALL, orderby=db.all_itinerary.date_created)\n\n    return "jQuery(\'#target\').append(\'<li><a href=\\"showIts?arg1=%s&arg2=%s&arg3=%s&arg4=%s&arg5=%s\\">%s</a></li>\');" % (its.it_name,its.des_location,str(its.days_staying_start),str(its.days_staying_end),its.description_of_stays,its.it_name)\n    #return dict(its=its)\n\ndef showIts():\n    #item        = request.vars\n    name        = request.args(0)\n    location    = request.args(1)\n    start       = request.args(2)\n    end         = request.args(3)\n    des         = request.args(4)\n    return dict(name=name,location=location, start=start, end=end, des=des)\n\n@auth.requires_login()\ndef follow():\n    if request.env.request_method != \'POST\':\n        raise HTTP(400)\n    tablename = \'follows\'\n    to_follow = db.auth_user(request.vars[\'user\'])\n    action = request.vars[\'action\']\n    # FIXME ensure that to-follow user exists!\n    if to_follow is not None:\n        if action == \'follow\':\n            db[tablename].insert(follower=auth.user.id, followee=to_follow)\n            return HTTP(200)\n        elif action == \'unfollow\':\n            db(db.follows.follower==auth.user.id,\n               db.follows.followee==to_follow).delete()\n            return HTTP(200)\n        else:\n            return HTTP(400)\n        return HTTP(200)\n    else:\n        raise HTTP(400)\n\n\ndef users():\n    """\n    Display user profile\n    """\n    if request.args(0) is not None:\n        uid = request.args(0)\n        # TODO handle failure\n        user = db.auth_user[request.args(0)]\n        name = user.first_name + \' \' + user.last_name\n        its  = db().select(db.all_itinerary.ALL, orderby=db.all_itinerary.date_created)\n        #all_names    = db().select(db.all_itinerary.it_name)\n        followers    = db(db.follows.followee==uid).select(db.follows.ALL)\n        following    = db(db.follows.follower==uid).select(db.follows.ALL)\n        picture      = user.picture\n        gender       = user.gender\n        experance    = user.experance\n        description  = user.description\n        it_all       = db.all_itinerary[request.args(0)]\n        des_location = db(db.all_itinerary.des_location!=None).select(db.all_itinerary.des_location)\n        #it_name      = db(db.all_itinerary.it_name.des_name!=None).select()\n        days_staying_start   = db(db.all_itinerary.days_staying_start!=None).select(db.all_itinerary.days_staying_start)\n        days_staying_end     = db(db.all_itinerary.days_staying_end!=None).select(db.all_itinerary.days_staying_end)\n        description_of_stays = db(db.all_itinerary.description_of_stays!=None).select(db.all_itinerary.description_of_stays)\n        context = dict(name=name,followers=followers,following=following,picture=picture,description=description,\n            experance=experance,gender=gender, #it_name=it_name, \n            des_location=des_location,days_staying_start=days_staying_start,\n            days_staying_end=days_staying_end,description_of_stays=description_of_stays, its=its, user=user)\n        return response.render(\'default/users.html\', context)\n    else:\n        # TODO do something sensible?\n        return redirect(URL(\'default\',\'index\'))\n\nresponse._vars=response._caller(doStuff)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/cmps-107/lib/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/cmps-107/lib/web2py/applications/TRVLR/controllers/default.py", line 125, in <module>\n  File "/home/cmps-107/lib/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/cmps-107/lib/web2py/applications/TRVLR/controllers/default.py", line 53, in doStuff\n    return "jQuery(\'#target\').append(\'<li><a href=\\"showIts?arg1=%s&arg2=%s&arg3=%s&arg4=%s&arg5=%s\\">%s</a></li>\');" % (request.vars.d_name,request.vars.d_location,str(request.vars.d_start_date),str(request.vars.d_end_date),str(request.vars.d_description,request.vars.d_name)\nTypeError: str() takes at most 1 argument (2 given)\n'
p11
s.