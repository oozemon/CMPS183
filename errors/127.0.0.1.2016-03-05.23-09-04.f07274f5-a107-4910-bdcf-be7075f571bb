(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'a'"
p3
sS'layer'
p4
S'/home/cmps-107/lib/web2py/applications/TRVLR/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n### required - do no delete\ndef user():\n    return dict(form=auth())\ndef download(): return response.download(request,db)\ndef call(): return service()\n### end requires\n#<<<<<<< HEAD\n#def index():    \n    #    redirect(URL(c = \'create_profile\', f = \'testing\'))\n#    return dict(message="Mapping the world, for travlers")\n#=======\ndef index():\n    return dict(message="Mapping the world, for travelers")\n#>>>>>>> 52242180f257d101fbada5911903348870013b0a\n\ndef error():\n    return dict()\n\n#@auth.requires_login()\ndef destinations_manage():\n    form = SQLFORM.smartgrid(db.t_destinations,onupdate=auth.archive)\n    return locals()\n\n@auth.requires_login()\ndef profile_manage():\n    return dict(bla="testing")  \n\n@auth.requires_login()\ndef profile():\n    return redirect(URL(\'default\',\'users/\'+str(auth.user.id)))\n\ndef doStuff():\n    d_name        = request.vars.d_name\n    d_location    = request.vars.d_location\n    print d_name\n    print "\\n"\n    print d_location\n    #d_start_date  = request.vars.d_start_date\n    #d_end_date    = request.vars.d_end_date\n    #d_description = request.vars.d_description\n    db.all_itinerary.insert(it_name=d_name)\n    db.all_itinerary.insert(des_location=d_location)\n    #db.all_itinerary.insert(days_staying_start=d_start_date)\n    #db.all_itinerary.insert(days_staying_end=d_end_date)\n    #db.all_itinerary.insert(description_of_stays=d_description)\n    return "jQuery(\'#target\').html(\'%s\');" % str(request.vars.d_name)\n\n@auth.requires_login()\ndef follow():\n    if request.env.request_method != \'POST\':\n        raise HTTP(400)\n    tablename = \'follows\'\n    to_follow = db.auth_user(request.vars[\'user\'])\n    action = request.vars[\'action\']\n    # FIXME ensure that to-follow user exists!\n    if to_follow is not None:\n        if action == \'follow\':\n            db[tablename].insert(follower=auth.user.id, followee=to_follow)\n            return HTTP(200)\n        elif action == \'unfollow\':\n            db(db.follows.follower==auth.user.id,\n               db.follows.followee==to_follow).delete()\n            return HTTP(200)\n        else:\n            return HTTP(400)\n        return HTTP(200)\n    else:\n        raise HTTP(400)\n\n\ndef users():\n    """\n    Display user profile\n    """\n    if request.args(0) is not None:\n        uid = request.args(0)\n        # TODO handle failure\n        user = db.auth_user[request.args(0)]\n        name = user.first_name + \' \' + user.last_name\n        followers    = db(db.follows.followee==uid).select(db.follows.ALL)\n        following    = db(db.follows.follower==uid).select(db.follows.ALL)\n        picture      = user.picture\n        gender       = user.gender\n        experance    = user.experance\n        description  = user.description\n        it_all       = db.all_itinerary[request.args(0)]\n        des_location = db(db.all_itinerary.des_location!=None).select(db.all_itinerary.des_location)\n        #it_name      = db(db.all_itinerary.it_name.des_name!=None).select()\n        days_staying_start   = db(db.all_itinerary.days_staying_start!=None).select(db.all_itinerary.days_staying_start)\n        days_staying_end     = db(db.all_itinerary.days_staying_end!=None).select(db.all_itinerary.days_staying_end)\n        description_of_stays = db(db.all_itinerary.description_of_stays!=None).select(db.all_itinerary.description_of_stays)\n        context = dict(name=name,followers=followers,following=following,picture=picture,description=description,\n            experance=experance,gender=gender, #it_name=it_name, \n            des_location=des_location,days_staying_start=days_staying_start,\n            days_staying_end=days_staying_end,description_of_stays=description_of_stays)\n        return response.render(\'default/users.html\', context)\n    else:\n        # TODO do something sensible?\n        return redirect(URL(\'default\',\'index\'))\n\nresponse._vars=response._caller(doStuff)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/cmps-107/lib/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/cmps-107/lib/web2py/applications/TRVLR/controllers/default.py", line 102, in <module>\n  File "/home/cmps-107/lib/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/cmps-107/lib/web2py/applications/TRVLR/controllers/default.py", line 42, in doStuff\n    db.all_itinerary.insert(it_name=d_name)\n  File "/home/cmps-107/lib/web2py/gluon/packages/dal/pydal/objects.py", line 731, in insert\n    ret = self._db._adapter.insert(self, self._listify(fields))\n  File "/home/cmps-107/lib/web2py/gluon/packages/dal/pydal/adapters/base.py", line 739, in insert\n    query = self._insert(table,fields)\n  File "/home/cmps-107/lib/web2py/gluon/packages/dal/pydal/adapters/base.py", line 730, in _insert\n    values = \',\'.join(self.expand(v, f.type) for f, v in fields)\n  File "/home/cmps-107/lib/web2py/gluon/packages/dal/pydal/adapters/base.py", line 730, in <genexpr>\n    values = \',\'.join(self.expand(v, f.type) for f, v in fields)\n  File "/home/cmps-107/lib/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/home/cmps-107/lib/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1439, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'a\'\n'
p11
s.